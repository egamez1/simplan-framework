{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SimPlan - Simple Execution Planner","text":"<p>Simplan framework offers a way to auther LowCode/NoCode operations in a simple way. It is based on the concept of a plan, which is a set of operations that are executed in a specific order. The operations are defined in a HOCON file and can be executed by the SimPlan framework. </p> <p>The framework is built around the concept of operators. An operator is intended to perform an operation which is a unit of work the framework can perform. Operators can be written to abstract complex functionalities within themselves and expose certain configurations to customize their behavior. These operators are grouped to form tasks and it can be configured to run in a certain order to collectively perform the intended outcome. It provides dependency chaining, operatior/task/application level metrics, monitoring, and quality control with circuit breakers before and after performing each operation definition. A rich definition grammar enforces a quick and consistent way to define operations and its dependencies.</p>"},{"location":"#featuresbenefits","title":"Features/Benefits","text":"<ul> <li>Config Driven (Low/No code)</li> <li>Configurable and Pluggable Operators</li> <li>Maintains and abstracts application initialization execution context.<ul> <li>Eg: In the case of Spark, SparkSession and SparkContext and in case of flink, StreamExecutionEnvironment and StreamTableEnvironment etc</li> </ul> </li> <li>Connect to any JDBC sources and execute like Redshift, Athena, Presto, etc</li> <li>Built-In Quality control with circuit breakers pre/post each operator execution.</li> <li>Lineage, Observability, and Metrics tracking are built into the framework</li> <li>Metrics are emitted as a specific category within log4j which can be handled by any appender and published to an aggregation tool the user chooses like Elasticsearch/Opensearch/Splunk.</li> <li>Maintains XComs which maintains operator response states, and provides ability to cross communicate between operations.</li> <li>System-level features can be added as additive functions (extend Support trait)<ul> <li>Eg: IDPS Support can be added by just mentioning it as follows.</li> </ul> </li> </ul> <pre><code>val context = new ConsoleAppContext(config) with IDPSSupport\n</code></pre> <ul> <li>A lot of utils for Config parsing, Managing Execution context, Json Mapping, Exception handling, Execution tracking, metrics publishing, AWS-specific services like STS and S3, abstractions to handle Local/Hadoop/S3 file operations, to name a few.</li> </ul>"},{"location":"#simplan-for-data-process-authoring","title":"Simplan for Data Process Authoring","text":"<p>Simplan Spark and Simplan Flink are 2 different implementations of Simplan framework for data processing built on top of Apache Spark and Apache Flink respectively. These implementations are built to support the same set of features and functionalities on top of correspnding execution environments. Simplan's common configuration structure in thtended to allow easy migration of plans between different execution environments.</p>"},{"location":"#simplan-for-orchestration","title":"Simplan for Orchestration","text":"<p>Superglue uses Simplan framework for orchestration all its jobs. SG-Client is a simplan based appliation which is used to orchestrate all the jobs in Superglue.</p>"},{"location":"#presentations","title":"Presentations","text":""},{"location":"#simplan-dataai-summit","title":"Simplan @ DataAI Summit","text":""},{"location":"#communitysupport","title":"Community/Support","text":"<ul> <li>Join Simplan Slack Channel #simplan-community</li> </ul>"},{"location":"ContributionGuide/","title":"Contribution Guide","text":""},{"location":"ContributionGuide/#contribution-guide","title":"Contribution Guide","text":"<p>This guide is intended to help you get started contributing to the project. It is not intended to be a comprehensive guide to contributing to the project, but rather a guide to getting started. If you have any questions, please feel free to reach out to #simplan-community.</p>"},{"location":"ContributionGuide/#code-of-conduct","title":"Code of Conduct","text":"<p>Projects are \"living\" and constantly evolving. Contributions in the form of issues and pull requests are welcomed and encouraged. When you contribute, you explicitly say you are part of the community and abide by its Code of Conduct.</p> <p>At Intuit, we foster a kind, respectful, inclusive, harassment-free cooperative community. Our community works to:</p> <ul> <li>Be kind and respectful;</li> <li>Act as a global community;</li> <li>Conduct ourselves professionally.</li> <li>As members of this community, we will not tolerate behaviors including, but not limited to:<ul> <li>Violent threats or language;</li> <li>Discriminatory or derogatory jokes or language;</li> <li>Public or private harassment of any kind;</li> <li>Other conduct considered inappropriate in a professional setting.</li> </ul> </li> </ul>"},{"location":"ContributionGuide/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Clone the inner source repository to your local machine. Framework | Spark</li> <li>Create a branch for your changes.</li> <li>Make your changes, test it and push your changes to the branch in inner source repository.</li> <li>Create a pull request to the develop branch of the inner source repository.</li> <li>Once your pull request is approved by Simplan Maintainers, it will be merged into the develop branch of the inner source repository.</li> <li>The develop branch of the inner source repository will be synced with the develop branch of the main repository.</li> <li>Your changes will be available in the main repository and will be available in the next release.</li> </ul>"},{"location":"ContributionGuide/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please report it by opening a new issue. Please include as much information as possible, including the version of the project you are using, and execution context where the application is running. If you are able to reproduce the bug, please include a test case or an executable test case.</p>"},{"location":"GettingStarted/","title":"Getting Started","text":"<p>Simplan is a framework for defining an execution plan for operators that can be executed on different execution engines like Spark, Flink, Storm, Beam or even run as a simple console Application. It provides a common abstraction to define pluggable operators for processing both batch and streaming data and run on different execution engines with ability to integrate with various source/sinks. There are different execution engine implementations of Simplan available. Please select the following link to get started with the execution engine of your choice.</p>"},{"location":"GettingStarted/#simplan-implementations","title":"Simplan Implementations","text":"<ul> <li>Simplan Spark</li> <li>Simplan Flink</li> <li>Simplan Presto</li> </ul>"},{"location":"implementations/console/","title":"Console","text":""},{"location":"implementations/console/#console-application-on-simplan","title":"Console Application on Simplan","text":"<p>Simplan Console is a simple console application that can be used to run operators as a console application. It can be used to run any non-data operators which doesn't need an execution engine as a simple java application. If you can express your operator as a java class, you can run it as a console application using Simplan Console.</p> <p>Example Superglue uses Simplan to schedule all its pipelines with databricks.</p> <p>Repo: https://github.intuit.com/Superglue/sg-client</p>"},{"location":"implementations/dataprocessing/data-processing/","title":"Simplan for Data Process Authoring","text":"<p>For generating customer value from data, Data workers need to process large volumes of batch and streaming data. Separate codebase are maintained for Batch and Streaming modes which leads to siloed implementations for common data processing patterns. This leads to duplicate efforts from implementation to maintenance, hampering productivity. </p> <p>Users will be able to provide business logic as operators in a config file and the framework will take care of the rest. The framework will take care of the execution of these operators and provide the results to the user. The framework will also provide the lineage of the data and the metrics of the execution. </p>"},{"location":"implementations/dataprocessing/data-processing/#simplam-tech-stack","title":"Simplam Tech Stack","text":"<p>Simplan framework offers a bunch of built-in operators for common processing tasks. These operators can be used as is or can be extended to add custom logic. The framework also provides a way to write custom operators.</p>"},{"location":"implementations/dataprocessing/data-processing/#featuresbenefits","title":"Features/Benefits","text":"<ul> <li>Config Driven (Low/No code)</li> <li>Pluggable/Reusable operators for common processing tasks</li> <li>Multiple Execution Runtimes, Spark, Flink, Presto</li> <li>Abstraction over Execution Runtimes like Spark, Flink etc</li> <li>Batch and Streaming workloads</li> <li>External Integrations : Redshift, Athena, Kafka etc</li> <li>Built-In Quality control with circuit breakers.</li> <li>Lineage, Observability, and Metrics tracking.</li> <li>Integration for Intuit services like IDPS, Config Services, etc</li> <li>Improves developer productivity by 10-100 times</li> <li>Improves code quality, maintainability and reduces duplication</li> </ul>"},{"location":"implementations/dataprocessing/data-processing/#data-processing-implementations","title":"Data Processing Implementations","text":""},{"location":"implementations/dataprocessing/data-processing/#simplan-spark-successor-to-quicketl","title":"Simplan Spark (Successor to QuickETL)","text":"<p>Simplan Spark is an implementation of Simplan framework for Apache Spark execution engine. It provides a way to author batch and streaming operations in a simple way.</p> <p>Learn more : Simplan Spark</p>"},{"location":"implementations/dataprocessing/data-processing/#simplan-flink","title":"Simplan Flink","text":"<p>Learn More : Simplan Flink</p>"},{"location":"implementations/dataprocessing/data-processing/#simplan-presto","title":"Simplan Presto","text":"<p>Learn More : Simplan Presto</p>"},{"location":"implementations/dataprocessing/flink/","title":"Flink","text":""},{"location":"implementations/dataprocessing/flink/#simplan-for-apache-flink","title":"Simplan for Apache Flink","text":"<p>Simplan for Apache Flink is a framework for defining an execution plan for operators that can be executed on Apache Flink. It provides a common abstraction to define pluggable operators for processing both batch and streaming data and run on Apache Flink with ability to integrate with various source/sinks.</p> <p>For flink documentation, please visit Simplan Flink</p>"},{"location":"implementations/dataprocessing/presto/","title":"Presto","text":""},{"location":"implementations/dataprocessing/presto/#simplan-for-presto","title":"Simplan for Presto","text":"<p>Simplan for Presto is a framework for defining an execution plan for operators that can be executed on Presto. It provides a common abstraction to define pluggable operators for processing both batch and streaming data and run on Presto with ability to integrate with various source/sinks.</p> <p>For Presto documentation, please visit Simplan Presto</p>"},{"location":"implementations/dataprocessing/spark/","title":"Spark","text":""},{"location":"implementations/dataprocessing/spark/#simplan-for-apache-spark","title":"Simplan for Apache Spark","text":"<p>Simplan for Apache Spark is a framework for defining an execution plan for operators that can be executed on Apache Spark. It provides a common abstraction to define pluggable operators for processing both batch and streaming data and run on Apache Spark with ability to integrate with various source/sinks.</p> <p>For Spark documentation, please visit Simplan Spark</p>"},{"location":"implementations/logging/Simplan%20Fields/","title":"Simplan Fields","text":""},{"location":"implementations/logging/Simplan%20Fields/#simplan-logging","title":"Simplan Logging","text":"<p>Simplan Logging Fields</p> Field Discription"},{"location":"implementations/logging/Simplan%20Logging/","title":"Simplan Logging","text":""},{"location":"implementations/logging/Simplan%20Logging/#simplan-logging","title":"Simplan Logging","text":"<p>Simplan flow and logging events</p> <p></p> <p>Simplan flow and logging events</p> <p></p>"},{"location":"implementations/orchestration/orchestration/","title":"Simplan for Orchestrating Data Processing Jobs","text":"<p>Simplan framework is used to orchestrate all the jobs in Superglue. SG-Client is a simplan based appliation which is used to orchestrate all the jobs in Superglue.</p>"}]}